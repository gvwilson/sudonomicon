# 1

# A

- key: access_control
  en:
    term: access control
    def: >
      FIXME

- key: ascii
  ref:
  - ansi_encoding
  en:
    term: ASCII character encoding
    def: >
      A standard way to represent the characters commonly used in the Western
      European languages as 7-bit integers, now largely superceded by
      [Unicode](#unicode).

- key: authentication
  en:
    term: authentication
    def: >
      The act of establishing one's identity.

- key: authorization
  en:
    term: authorization
    def: >
      The act of establishing that one has a right to access certain information.

# B

- key: background_process
  en:
    term: background a process
    def: >
      To disconnect a [process](#process) from the terminal but keep it
      running.

- key: ball_and_stick
  en:
    term: ball-and-stick model
    def: >
      FIXME

- key: base64
  en:
    term: base64 encoding
    def: >
      A representation of binary data that represents each group of 6 bits
      as one of 64 printable characters.

- key: block_device
  en:
    term: "block device"
    def: >
      FIXME

- key: block_filesystem
  en:
    term: "block (in filesystem)"
    def: >
      FIXME

- key: buffer_noun
  en:
    term: buffer (noun)
    def: >
      An area of memory used to hold data temporarily.

- key: buffer_verb
  en:
    term: buffer (verb)
    def: >
      To store something in memory temporarily,
      e.g., while waiting for there to be enough data to make an I/O operation worthwhile.

# C

- key: cache
  en:
    term: cache
    def: >
      To store a copy of data locally in order to speed up access,
      or the data being stored.

- key: callback_function
  en:
    term: callback function
    def: >
      A function A that is passed to another function B so that B can call it at
      some later point.

- key: capability
  en:
    term: capability
    def: >
      FIXME

- key: character_device
  en:
    term: "character device"
    def: >
      FIXME

- key: character_encoding
  en:
    term: character encoding
    def: >
      A way to represent characters as bytes. Common examples include [ASCII](#ascii)
      and [UTF-8](#utf_8).

- key: child_process
  en:
    term: child process
    def: >
      A [process](#process) created by another process,
      which is called its [parent process](#parent_process).

- key: cleartext
  en:
    term: cleartext
    def: >
      Text that has not been [encrypted](#encryption).

- key: client
  en:
    term: client
    def: >
      A program such as a browser that sends requests to a server and does something with the response.

- key: command_interpolation
  en:
    term: command interpolation
    def: >
      FIXME

- key: concurrency
  en:
    term: concurrency
    def: >
      The ability of different parts of a system to take action at the same time.

- key: copy_on_write
  en:
    term: copy-on-write
    def: >
      FIXME

# D

- key: daemon
  en:
    term: daemon
    def: >
      A long-lived process managed by an operating system
      that provides a service such as printer management to other processes.

- key: device
  en:
    term: device
    def: >
      FIXME

- key: docker
  en:
    term: Docker
    def: >
      A tool for creating and managing isolated computing environments.

- key: docker_container
  en:
    term: Docker container
    def: >
     A particular running (or runnable) instance of a [Docker image](#docker_image).

- key: docker_image
  en:
    term: Docker image
    def: >
      A package containing the software and supporting files [Docker](#docker) needs
      to run an application in isolation.

- key: docker_layer
  en:
    term: layer (of Docker image)
    def: >
      FIXME

- key: docker_tag
  en:
    term: tag (a Docker image)
    def: >
      FIXME

- key: dockerfile
  en:
    term: Dockerfile
    def: >
      The name usually given to a file containing commands to build a [Docker image](#docker_image).

- key: dynamic_content
  en:
    term: dynamic content
    def: >
      Web site content that is generated on the fly.
      Dynamic content is usually customized according to the requester's identity,
      [query parameter](#query_parameter),
      etc.

# E

- key: encryption
  en:
    term: encryption
    def: >
      The process of converting data from a representation that anyone can read
      to one that can only be read by someone with the right algorithm and/or key.

- key: env_var
  en:
    term: environment variable
    def: >
      A [shell variable](#shell_var) that is inherited by [child processes](#child_process)

- key: exit_status
  en:
    term: exit status
    def: >
      FIXME

# F

- key: filesystem
  en:
    term: filesystem
    def: >
      The set of files and directories making up a computer's permanent storage,
      or the software component used to manage them.

- key: flush
  en:
    term: flush
    def: >
      To move data from a [buffer](#buffer_noun) to its intended destination immediately.

- key: foreground_process
  en:
    term: foreground a process
    def: >
      To reconnect a [process](#process) to the terminal after it has
      been [backgrounded](#background_process) or [suspended](#suspend_process).

- key: fork_process
  en:
    term: fork (a process)
    def: >
      To create a duplicate of an existing [process](#process),
      typically in order to run a new program.

# G

- key: gid
  en:
    term: group ID
    acronym: gid
    def: >
      FIXME

# H

- key: hash
  en:
    term: hash
    def: >
      FIXME

- key: hostname
  en:
    term: hostname
    def: >
      A human-readable name for a computer on a network.

- key: http
  en:
    term: HTTP
    full: HyperText Transfer Protocol
    def: >
      The protocol used to exchange information between browsers and websites,
      and more generally between other clients and servers.
      Communication consists of [requests](#http_request) and [responses](#http_response).

- key: http_header
  en:
    term: header (of HTTP request or response)
    def: >
      A name-value pair at the start of an [HTTP request](#http_request) or [response](#http_response).
      Headers are used to specify what data formats the sender can handle,
      the date and time the message was sent,
      and so on.

- key: http_method
  en:
    term: HTTP method
    def: >
      The verb in an [HTTP request](#http_request) that defines what the [client](#client) wants to do.
      Common methods are `GET` (to get data) and `POST` (to submit data).

- key: http_request
  en:
    term: HTTP request
    def: >
      A precisely-formatted block of text sent from a [client](#client) such as a browser
      to a [server](#server)
      that specifies what resource is being requested,
      what data formats the client will accept, etc.

- key: http_response
  en:
    term: HTTP response
    def: >
      A precisely-formatted block of text sent from a [server](#server)
      back to a [client](#client) in reply to a [request](#http_request).

- key: http_status_code
  en:
    term: HTTP status code
    def: >
      A numerical code that indicates what happened when an [HTTP request](#http_request) was processed,
      such as 200 (OK),
      404 (not found),
      or 500 (internal server error).

# I

- key: inode
  en:
    term: inode
    def: >
      FIXME

# J

- key: json
  en:
    term: JavaScript Object Notation
    acronym: JSON
    def: >
      A way to represent data by combining basic values like numbers
      and character strings in lists and key-value structures. Unlike
      other formats, it is unencumbered by a syntax for writing comments.

# K

# L

- key: link_hard
  en:
    term: hard link (in filesystem)
    def: >
      FIXME

- key: link_sym
  en:
    term: symbolic link (in filesystem)
    def: >
      FIXME

- key: lint
  en:
    term: lint
    def: >
      FIXME

- key: local_server
  en:
    term: local server
    def: >
      A [server](#server) running on the programmer's own computer,
      typically for development purposes.

- key: localhost
  en:
    term: localhost
    def: >
      A special [host name](#hostname) that identifies
      the computer that the software is running on.

# M

- key: mime_type
  en:
    term: MIME type
    def: >
      A standard that defines types of file content,
      such as `text/plain` for plain text and `image/jpeg` for JPEG images.

- key: mount
  en:
    term: mount
    def: >
      FIXME

# N

- key: name_collision
  en:
    term: name collision
    def: >
      The problem that occurs when two different applications use the same name
      for different things.

# O

- key: octal
  en:
    term: octal
    def: >
      FIXME

- key: operating_system
  en:
    term: operating system
    acronym: OS
    def: >
      A program whose job is to manage the hardware of a computer.
      Other programs interact with the OS through [system calls](#system_call).

# P

- key: parent_process
  en:
    term: parent process
    def: >
      A [process](#process) which has created one or more other processes,
      which are called its [child processes](#child_process).

- key: path
  en:
    term: path (in filesystem)
    def: >
      An expression that refers to a file or directory in a filesystem.

- key: port
  en:
    term: port
    def: >
      A logical endpoint for communication,
      like a phone number in an office building.

- key: process
  en:
    term: process
    def: >
      A running instance of a program.

- key: process_id
  en:
    term: process ID
    def: >
      The unique numerical identifier of a running [process](#process).

- key: process_tree
  en:
    term: process tree
    def: >
      The set of processes created directly or indirectly by one process
      and the [parent](#parent_process)-[child](#child_process) relationships between them.

# Q

- key: query_parameter
  en:
    term: query parameter
    def: >
      A key-value pair included in a URL that the server may use to modify or customize its response.

# R

- key: refactor
  en:
    term: refactor
    def: >
      To reorganize code without changing its overall behavior.

- key: resume_process
  en:
    term: resume (a process)
    def: >
      To continue the execution of a [suspended](#suspend_process) [process](#process).

- key: resolve_path
  en:
    term: resolve (a path)
    def: >
      To translate a [path](#path) into the canonical name of the file or directory it refers to.

- key: root_directory
  en:
    term: root directory
    def: >
      The top-most directory in the [filesystem](#filesystem)
      that contains all other directories and files.

- key: root_user
  en:
    term: root (user account)
    def: >
      The usual ID of the [superuser](#superuser) account on a computer.

# S

- key: sandbox
  en:
    term: sandbox
    def: >
      An isolated computing environment in which operations can be executed safely.

- key: server
  en:
    term: server
    def: >
      A program that waits for requests from [clients](#client)
      and sends them data in response.

- key: shell
  en:
    term: shell
    def: >
      A program that allows a user to interact with a computer's operating system
      and other programs through a textual user interface.

- key: shell_script
  en:
    term: shell_script
    def: >
      A program that uses [shell](#shell) commands as its programming language.

- key: shell_var
  en:
    term: shell variable
    def: >
      A variable set and used in the [shell](#shell).

- key: signal
  en:
    term: signal
    def: >
      A message sent to a running [process](#process) separate from its
      normal execution, such as an interrupt or a timer notification.

- key: signal_handler
  en:
    term: signal handler
    def: >
      A [callback function](#callback_function) that is called when
      a [process](#process) receives a [signal](#signal).

- key: source_shell
  en:
    term: source (in shell script)
    def: >
      To run one [shell script](#shell_script) in the same process as another.

- key: static_file
  en:
    term: static file
    def: >
      Web site content that is stored as a file on disk that is served as-is.
      Serving static files is usually faster than generating [dynamic content](#dynamic_content),
      but can only be done if what's wanted is unchanging and known in advance.

- key: superuser
  en:
    term: superuser
    def: >
      An administrative account on a computer that has permission
      to see, change, and run everything.

- key: suspend_process
  en:
    term: suspend (a process)
    def: >
      To pause the execution of a [process](#process) but leave it intact so that it
      can [resume](#resume_process) later.

- key: system_call
  en:
    term: system call
    def: >
      A call to one of the functions provided by an [operating system](#operating_system).

# T

# U

- key: uid
  en:
    term: user ID
    acronym: uid
    def: >
      FIXME

- key: unicode
  en:
    term: Unicode
    def: >
      A standard that defines numeric codes for many thousands of characters and
      symbols. Unicode does not define how those numbers are stored; that is
      done by standards like [UTF-8](#utf_8).

- key: user_group
  en:
    term: user group
    def: >
      FIXME

- key: utf_8
  en:
    term: UTF-8
    def: >
      A way to store the numeric codes representing [Unicode](#unicode)
      characters that is backward-compatible with the older [ASCII](#ascii) standard.

- key: uuid
  en:
    term: Universally Unique Identifier
    acronym: UUID
    def: >
      FIXME

# V

- key: virtual_env
  en:
    term: virtual environment
    def: >
      A set of libraries, applications, and other resources that are isolated from the main system
      and other virtual environments.

# W

- key: web_scraping
  en:
    term: web scraping
    def: >
      The act of extracting data from HTML pages on the web.

# X

# Y

# Z
